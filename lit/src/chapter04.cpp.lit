== Chapter 4 ==
This is chapter 4 of the online OpenGL book: 
http://openglbook.com/the-book/chapter-4-entering-the-third-dimension/

This program will draw a rotating 3D cube to the screen, using all
the techniques discussed in previous chapters, and some new ones,
namely loading shaders from an external file.

== Moving to 3D ==
The most obvious change we're making in this chapter is the transition from
2D into 3D. This introduces a lot of new functionality and math, most of
which is abstracted into a helper, called util.cpp and util.hpp. There are
literati versions of these files that have ample documentation as to what
they do.

Here, I'm going to assume you know a fair bit about 3D graphics theory,
things like affine transformations, co-ordinate systems, projection and
texturing. If not, a good place to start would be the Harvard Extension
School course "CSCI E-234 Intro to Computer Graphics and GPU Programming":http://itunes.apple.com/us/itunes-u/csci-e-234-introduction-to/id428958018

Another source I recommend is the following:
http://duriansoftware.com/joe/An-intro-to-modern-OpenGL.-Chapter-1:-The-Graphics-Pipeline.html
This covers the basics of how OpenGL and GPU's work. A lot of this should
have been picked up from the lessons to date, however if you need a refresher
or a nice summary, that will do the job nicely.

First, lets talk a bit more about shaders.

== Shaders and uniforms ==
In the previous sections, we have simply sent in data about each vertex to
the GPU, and done all the processing on the CPU. This is ignoring a huge
benefit of the GPU, in that it's very good at these kinds of calculations.
Ideally, we would push as much math and calculating of vertex data onto the
GPU as we can. That's what we attempt to do in this section.

As said previously, you can pass data into your shaders from the OpenGL
program. So far, the only data we have sent in is per vertex data, notably
the vertex position and colour attributes. We can also send down global
variables that are constant for all vertices. These are called uniforms.

Uniforms allow us to set data for a drawing pass, and not have to change it
for each vertex. Each vertex will have access to the same uniforms, until
they are changed.

Uniforms can be any GLSL datatype. In our example, in the shader files, we
are using mat4 data types, which are 4x4 matrices.

== Retrieving uniform locations ==
Due to the nature of how GPUs work, in order to pass this data to the GPU,
we need to buffer the data directly into it's memory. To do that, we need
to know where the shader program is expecting to find the data for each
uniform.

We can do that with the glGetUniformLocation method. The parameters to this
function are as follows:
* program - the identifier of the program
* name - the name of the uniform we want to find, as declared in the GLSL
  shader

This function will return an integer uniform location, which we then store.
-
ModelMatrixUniformLocation = glGetUniformLocation(ShaderIds[0], "ModelMatrix");
ViewMatrixUniformLocation = glGetUniformLocation(ShaderIds[0], "ViewMatrix");
ProjectionMatrixUniformLocation = glGetUniformLocation(ShaderIds[0], "ProjectionMatrix");
ExitOnGLError("ERROR: Could not get the shader uniform locations");
-

== Setting uniform data ==
Once we have found the uniform locations, we can buffer data into the GPU.
OpenGL provides a family of functions to do so, one function for each different
data type. All functions begin with the prefix glUniform.

Because our uniforms are of the mat4 type, we're going to use glUniformMatrix4fv
to push floating point data to the mat4 uniforms.

The arguments for glUniformMatrix4fv are as follows:
* location - the location of the uniform to push data into, as retrieved from
  glGetUniformLocation
* count - the number of matrices to pass. We can pass an array of matrices.
* transpose - if the matrix is in row major order (which ours aren't), then they
  will need to be transposed first, to column major order. This parameter tells
  the GPU if this needs to be done.
* value - the location in memory of the first element of the array that represents
  a matrix

A matrix in OpenGL is represented by an array of 16 floating point numbers. OpenGL
will convert the array to the format the GPU is expecting.

In this program, we store the cube's local transformations in the ModelMatrix, the
camera/eye transormations in the ViewMatrix and the ProjectionMatrix holds the
perspective projection matrix. These variables all need to be sent to the GPU.

Because the ProjectionMatrix won't change unless the screen size changes, we
send that data to the GPU in a separate place.
-
glUniformMatrix4fv(ModelMatrixUniformLocation, 1, GL_FALSE, ModelMatrix.m);
glUniformMatrix4fv(ViewMatrixUniformLocation, 1, GL_FALSE, ViewMatrix.m);
ExitOnGLError("ERROR: Could not set the shader uniforms");
-

== 3D cube initialization ==
We have made significant changes to the way we initialize a new window for this
chapter. We will outline the high level changes here, and then get into the
details of each change.
-
Enable depth testing. 

Enable culling.
 
Initialize matrices.
 
CreateCube();
-

== Enable depth testing ==
First, because we're dealing with 3D elements now, we want the GPU to do depth
comparisons when drawing fragments after rasterization. This will prevent
fragments that are further away from the camera from overlapping those that are
closer to the camera, but may have been drawn earlier.

We do this by enabling the GL_DEPTH_TEST flag, and telling OpenGL how the comparison
works, by using GL_LESS.

glDepthFunc can take the following enumerations:
* GL_NEVER: a fragment never passes the depth test.
* GL_LESS: a fragment passes when its depth value is less (closer to the camera) 
  than the fragment currently stored in the depth buffer. We use this enumeration in 
  our program.
* GL_EQUAL: a fragment passes the depth test when its depth value is equal to the one 
  currently stored in the depth buffer.
* GL_LEQUAL: a fragment passes the depth test when its depth value is less or equal 
  to the one currently stored in the depth buffer.
* GL_GREATER: the opposite of GL_LESS.
* GL_NOTEQUAL: the opposite of GL_EQUAL.
* GL_GEQUAL: a fragment passes the depth test when its depth value is greater or 
  equal to the one currently stored in the depth buffer.
* GL_ALWAYS: the opposite of GL_NEVER.
-
glEnable(GL_DEPTH_TEST);
glDepthFunc(GL_LESS);
ExitOnGLError("ERROR: Could not set OpenGL depth testing options");
-

== Enable culling ==
Up until now, it didn't matter which order we draw the vertices in, as we were
always drawing every vertex. However, when drawing convex 3D objects, rendering
any polygons inside convex shapes, or behind polygons is a waste of compute time, 
as they will never be seen.

To prevent OpenGL from drawing polygons that will never be seen, we can enable
polygon culling.

When we turn culling on, we need to tell it how to cull. Options for glCullFace
are as follows:
* GL_FRONT: Cull the front face of a polygon
* GL_BACK: Cull the back face of a polygon
* GL_FRONT_AND_BACK: Cull both faces of the polygon

In order to tell OpenGL which face is the front face, and which is the back, we
need to specify the winding of polygons. This tells us the direction we intend
to draw each polygon in, starting from the first vertex until the last. 
Here, we enable counter-clockwise winding. The alternative is GL_CW, which is
clockwise winding. This essentially just changes the order in which our vertices
need to be specified. Getting this wrong will cause weird things to happen
depending on your culling. If you're finding a model looks like a hollow cross
section, chances are you have the winding back to front.

If culling is set to GL_FRONT_AND_BACK, no faces will be drawn, however lines
and points will be drawn.
-
glEnable(GL_CULL_FACE);
glCullFace(GL_BACK);
glFrontFace(GL_CCW);
ExitOnGLError("ERROR: Could not set OpenGL culling options");
-

== Initialize matrices ==
Initialize the matrices by loading them with the identity matrix.
Pull the camera further back in the scene by translating it along the negative
z-axis, so we're not looking inside the cube when it's drawn.
-
ModelMatrix = IDENTITY_MATRIX;
ProjectionMatrix = IDENTITY_MATRIX;
ViewMatrix = IDENTITY_MATRIX;
TranslateMatrix(&ViewMatrix, 0, 0, -2);
-

== Create cube ==
The cube creation code is very similar to the triangle creation code used in
chapter 03b, with the only difference being loading the shader from an
external file instead of declaring it inline.
-
void CreateCube(void)
{
  const Vertex VERTICES[8] =
  {
      { { -.5f, -.5f,  .5f, 1 }, { 0, 0, 1, 1 } },
      { { -.5f,  .5f,  .5f, 1 }, { 1, 0, 0, 1 } },
      { {  .5f,  .5f,  .5f, 1 }, { 0, 1, 0, 1 } },
      { {  .5f, -.5f,  .5f, 1 }, { 1, 1, 0, 1 } },
      { { -.5f, -.5f, -.5f, 1 }, { 1, 1, 1, 1 } },
      { { -.5f,  .5f, -.5f, 1 }, { 1, 0, 0, 1 } },
      { {  .5f,  .5f, -.5f, 1 }, { 1, 0, 1, 1 } },
      { {  .5f, -.5f, -.5f, 1 }, { 0, 0, 1, 1 } }
  };

  const GLuint INDICES[36] =
  {
      0,2,1,  0,3,2,
      4,3,0,  4,7,3,
      4,1,5,  4,0,1,
      3,6,2,  3,7,6,
      1,6,5,  1,2,6,
      7,5,6,  7,4,5
  };

  ShaderIds[0] = glCreateProgram();
  ExitOnGLError("ERROR: Could not create the shader program");

  Load shaders.

  Retrieving uniform locations.

  glGenVertexArrays(1, &BufferIds[0]);
  ExitOnGLError("ERROR: Could not generate the VAO");
  glBindVertexArray(BufferIds[0]);
  ExitOnGLError("ERROR: Could not bind the VAO");

  glEnableVertexAttribArray(0);
  glEnableVertexAttribArray(1);
  ExitOnGLError("ERROR: Could not enable vertex attributes");

  glGenBuffers(2, &BufferIds[1]);
  ExitOnGLError("ERROR: Could not generate the buffer objects");

  glBindBuffer(GL_ARRAY_BUFFER, BufferIds[1]);
  glBufferData(GL_ARRAY_BUFFER, sizeof(VERTICES), VERTICES, GL_STATIC_DRAW);
  ExitOnGLError("ERROR: Could not bind the VBO to the VAO");
   
  glVertexAttribPointer(0, 4, GL_FLOAT, GL_FALSE, sizeof(VERTICES[0]), (GLvoid*)0);
  glVertexAttribPointer(1, 4, GL_FLOAT, GL_FALSE, sizeof(VERTICES[0]), (GLvoid*)sizeof(VERTICES[0].Position));
  ExitOnGLError("ERROR: Could not set VAO attributes");

  glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, BufferIds[2]);
  glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(INDICES), INDICES, GL_STATIC_DRAW);
  ExitOnGLError("ERROR: Could not bind the IBO to the VAO");
   
  glBindVertexArray(0);
}
-

== Load shaders ==
While the heavy lifting of opening the shader file, reading the data and
compiling the shader is handled in the utils.cpp file, we still need to
attach the shaders to the shader program and link it
-
ShaderIds[1] = LoadShader("shaders/SimpleShader.fragment.glsl", GL_FRAGMENT_SHADER);
ShaderIds[2] = LoadShader("shaders/SimpleShader.vertex.glsl", GL_VERTEX_SHADER);
glAttachShader(ShaderIds[0], ShaderIds[1]);
glAttachShader(ShaderIds[0], ShaderIds[2]);

glLinkProgram(ShaderIds[0]);
ExitOnGLError("ERROR: Could not link the shader program");
-

== Draw cube ==
Now that we have the data structures holding vertex data created, the
shaders loaded, the uniform locations of the shaders found, it's time to
send some data to the GPU and get to drawing.

There are a few subtle changes to the way we draw the object vs. earlier
chapters, so we will step through the method. Remember, this function is
called once per application tick, so is one complete render of the cube.

Much of the code below handles rotating the cube. The rotation of the cube
is a function of time, where it spins 45 degrees per second. We log the last
time we calculated the rotation, and the difference, and determine how
many degrees it has turned since then, and add it to the rotation.

We then rotate the model matrix around the x and y axis by this amount,
which will affect the cube's rotation in the vertex shader.

We then enable the shader program, and bind the VAOs and draw the elements.
Once we've finished the draw, we unbind the VAOs and unbind the shader
program.
-
void DrawCube(void)
{
  float CubeAngle;
  clock_t Now = clock();
  if (LastTime == 0)
      LastTime = Now;
   
  CubeRotation += 45.0f * ((float)(Now - LastTime) / CLOCKS_PER_SEC);
  CubeAngle = DegreesToRadians(CubeRotation);
  LastTime = Now;

  ModelMatrix = IDENTITY_MATRIX;
  RotateAboutY(&ModelMatrix, CubeAngle);
  RotateAboutX(&ModelMatrix, CubeAngle);

  glUseProgram(ShaderIds[0]);
  ExitOnGLError("ERROR: Could not use the shader program");
   
  Setting uniform data.

  glBindVertexArray(BufferIds[0]);
  ExitOnGLError("ERROR: Could not bind the VAO for drawing purposes");
   
  glDrawElements(GL_TRIANGLES, 36, GL_UNSIGNED_INT, (GLvoid*)0);
  ExitOnGLError("ERROR: Could not draw the cube");
   
  glBindVertexArray(0);
  glUseProgram(0);
}
-

== Resize event handler ==
The last significant piece of information is the recalculation of the
projection matrix when the screen is resized.

Because the projection matrix is calculated dependent on the display
ratio of the window, when that changes, we need to recalculate the
projection matrix and update the uniform in the shader program with the
new data.
-
void ResizeFunction(int Width, int Height)
{
  CurrentWidth = Width;
  CurrentHeight = Height;
  glViewport(0, 0, CurrentWidth, CurrentHeight);
  ProjectionMatrix =
    CreateProjectionMatrix(
        60,
        (float)CurrentWidth / CurrentHeight,
        1.0f,
        100.0f
    );
   
  glUseProgram(ShaderIds[0]);
  glUniformMatrix4fv(ProjectionMatrixUniformLocation, 1, GL_FALSE, ProjectionMatrix.m);
  glUseProgram(0);
}
-

== Destroy cube ==
The standard destruction code that is similar to the triangle destroy
function.
-
void DestroyCube(void)
{
    glDetachShader(ShaderIds[0], ShaderIds[1]);
    glDetachShader(ShaderIds[0], ShaderIds[2]);
    glDeleteShader(ShaderIds[1]);
    glDeleteShader(ShaderIds[2]);
    glDeleteProgram(ShaderIds[0]);
    ExitOnGLError("ERROR: Could not destroy the shaders");
 
    glDeleteBuffers(2, &BufferIds[1]);
    glDeleteVertexArrays(1, &BufferIds[0]);
    ExitOnGLError("ERROR: Could not destroy the buffer objects");
}
-

== Cube functions ==
-
Create cube.

Draw cube.

Destroy cube.
-

== Render event handler ==
Add a hook in to draw our cube on tick.
-
void RenderFunction(void)
{
  FPS meter increment during render.
  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
  DrawCube();

  glutSwapBuffers();
  glutPostRedisplay();
}
-

== 3D cube event handlers ==
This calls the DestroyCube function when GLUT is closing.
This is only included when using freeglut.
When not using freeglut, the VBO and shaders will probably
leak.
-
#if defined(FREEGLUT)
  glutCloseFunc(DestroyCube);
#endif
-

== Set function callbacks ==
Add 3D cube event handlers
-
glutReshapeFunc(ResizeFunction);
glutDisplayFunc(RenderFunction);
FPS meter event handlers.
3D cube event handlers.
-

== Initialize ==
Clear out the errors from GLEW initialization and add a literati hook
for 3D cube initialization.
-
void Initialize(int argc, char* argv[])
{
  InitWindow(argc, argv);

  glewExperimental = GL_TRUE;
  GLEW initialization.

  fprintf(
    stdout,
    "INFO: OpenGL Version: %s\n",
    glGetString(GL_VERSION)
  );

  glGetError();
  glClearColor(0.0f, 0.0f, 0.0f, 0.0f);

  3D cube initialization.
}
-

== 3D cube globals ==
-
GLuint
    ProjectionMatrixUniformLocation,
    ViewMatrixUniformLocation,
    ModelMatrixUniformLocation,
    BufferIds[3] = { 0 },
    ShaderIds[3] = { 0 };
Matrix
    ProjectionMatrix,
    ViewMatrix,
    ModelMatrix;
float CubeRotation = 0;
clock_t LastTime = 0;
-

== Global variables ==
-
int CurrentWidth = 800,
  CurrentHeight = 600,
  WindowHandle = 0;
FPS meter global.
3D cube globals.
-

== 3D cube forward declarations ==
-
void CreateCube(void);
void DestroyCube(void);
void DrawCube(void);
-

== Forward declarations ==
-
void Initialize(int, char*[]);
void InitWindow(int, char*[]);
void ResizeFunction(int, int);
void RenderFunction(void);
FPS meter forward declarations.
3D cube forward declarations.
-

== Preprocessor variables ==
Update the chapter number.
-
#define WINDOW_TITLE_PREFIX "Chapter 4"
-

== OpenGL includes ==
Since we include all of these dependencies in the utils.hpp file,
just include that instead.
-
#include "utils.hpp"
-

== Boilerplate ==
Boilerplate code that puts together the above functionality
and has a main loop, which inits the window, starts the
GLUT loop and then quits once the loop exits.
-
Standard includes.
OpenGL includes.
Preprocessor variables.

Global variables.

Forward declarations.

int main(int argc, char* argv[])
{
  Initialize(argc, argv);

  Start GLUT loop.

  exit(EXIT_SUCCESS);
}

Initialize.

Window initialization function.

Resize event handler.

Render event handler.

FPS meter idle function.

FPS meter timer function.

Cube functions.
-

== @chapter04.cpp ==
@inherit chapter01.cpp.lit
Boilerplate.