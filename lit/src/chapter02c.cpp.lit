== Chapter 2c ==
This is chapter 2 of the online OpenGL book: 
http://openglbook.com/the-book/chapter-2-vertices-and-shapes/

This program will open a window with an OpenGL context, and
draw a triangle to the screen using a vertex buffer object
(VBO), and a custom data structure.

== Rendering variables ==
You'll notice here that we have a new struct that we are going to
use to describe both the position and color attributes of each
vertex, and that we have gotten rid of the ColorBufferId variable.
-
typedef struct
{
  float XYZW[4];
  float RGBA[4];
} Vertex;

GLuint
  VertexShaderId,
  FragmentShaderId,
  ProgramId,
  VaoId,
  VboId;
-

== Vertex buffer object setup function ==
Instead of using two arrays to store positional and color data
separately, now we use our custom struct. Here we have a list of
Vertex objects, each one with 2 arrays - position as the first, and
color as the second.
-
void CreateVBO(void)
{
  Vertex Vertices[] =
  {
      { { -0.8f, -0.8f, 0.0f, 1.0f }, { 1.0f, 0.0f, 0.0f, 1.0f } },
      { {  0.0f,  0.8f, 0.0f, 1.0f }, { 0.0f, 1.0f, 0.0f, 1.0f } },
      { {  0.8f, -0.8f, 0.0f, 1.0f }, { 0.0f, 0.0f, 1.0f, 1.0f } }
  };

  GLenum ErrorCheckValue = glGetError();

  Fill VBO with vertex data.

  ErrorCheckValue = glGetError();
  if (ErrorCheckValue != GL_NO_ERROR)
  {
    fprintf(
      stderr,
      "ERROR: Could not create a VBO: %s \n",
      gluErrorString(ErrorCheckValue)
    );

    exit(-1);
  }
 }
-

== Fill VBO with vertex data ==
Now that we are using a slightly more complex object to store our data, we
need to describe to OpenGL how to consume our data.

This time, we're going to create 2 buffers. One to hold the vertex position
data, one to hold the vertex color data. We store the number of buffers
needed, and calculate it based on the struct itself.
Likewise for the size of each vertex, and the offset of the RGB data.

We generate a single buffer, and again, only one VAO.

We bind the VAO and the VBO, and create 2 buffers, with the contents of the
Verticies object.

We tell the VAO that the first buffer has 4 elements of GL_FLOAT, not to
normalize it, and that the stride is the number of bytes of each Vertex object, 
and that it starts at index 0.

We then tell the VAO that the second buffer has 4 elements of GL_FLOAT,
not to normalize it, that the stride is the number of bytes of each Vertex
object, and that each object is offset by the number of bytes in the positional
attribute of the Vertex.

Then we enable both attributes.
-
const size_t BufferSize = sizeof(Vertices);
const size_t VertexSize = sizeof(Vertices[0]);
const size_t RgbOffset = sizeof(Vertices[0].XYZW);

glGenBuffers(1, &VboId);

glGenVertexArrays(1, &VaoId);
glBindVertexArray(VaoId);

glBindBuffer(GL_ARRAY_BUFFER, VboId);
glBufferData(GL_ARRAY_BUFFER, BufferSize, Vertices, GL_STATIC_DRAW);

glVertexAttribPointer(0, 4, GL_FLOAT, GL_FALSE, VertexSize, 0);
glVertexAttribPointer(1, 4, GL_FLOAT, GL_FALSE, VertexSize, (GLvoid*)RgbOffset);

glEnableVertexAttribArray(0);
glEnableVertexAttribArray(1);
-

== Vertex buffer object destruction function ==
This is the same as before, only now we don't destroy the ColorBufferId
buffer because it no longer exists.
-
void DestroyVBO(void)
{
  GLenum ErrorCheckValue = glGetError();

  glDisableVertexAttribArray(1);
  glDisableVertexAttribArray(0);

  glBindBuffer(GL_ARRAY_BUFFER, 0);

  glDeleteBuffers(1, &VboId);

  glBindVertexArray(0);
  glDeleteVertexArrays(1, &VaoId);

  ErrorCheckValue = glGetError();
  if (ErrorCheckValue != GL_NO_ERROR)
  {
    fprintf(
      stderr,
      "ERROR: Could not destroy the VBO: %s \n",
      gluErrorString(ErrorCheckValue)
    );

    exit(-1);
  }
}
-

== @chapter02c.cpp ==
@inherit chapter02b.cpp.lit
Boilerplate.