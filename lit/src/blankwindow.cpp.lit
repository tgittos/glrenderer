== Chapter 1 ==
This is chapter 1 of the online OpenGL book: 
http://openglbook.com/the-book/chapter-1-getting-started/

This program will simply open a blank window that we can
resize, and print out information about OpenGL to the console.

== Window initialization ==
First thing to do is to create and initialize the window that
is going to hold our OpenGL context.

OpenGL is an API for accessing the underlying graphics hardware
of a computer. As such, it is independent from the windowing API.
What is happening here is we're creating a OS level window that
hosts an OpenGL context. It's that context that will recieve
our OpenGL calls.

GLUT is a library that abstracts the OS level opening of a window
and insertion of an OpenGL context, so we're going to leverage GLUT.

The original tutorial used FreeGLUT, however this code is originally
written on OS X, which natively has it's own GLUT library, so we'll
use that.

== Get the context ==
If we are using FreeGLUT, we ask for a forward-compatible OpenGL 4.0
core-profile context. If we're not using FreeGLUT, we will just take
whatever we're given.
-
glutInitContextVersion(3, 3);
glutInitContextFlags(GLUT_FORWARD_COMPATIBLE);
glutInitContextProfile(GLUT_CORE_PROFILE);
-

== Set the context options ==
Next, we try and set a FreeGLUT specific option:

GLUT_ACTION_ON_WINDOW_CLOSE - this ensures that FreeGLUT returns to
the method that started glutMainLoop instead of exiting the entire
program, as is the default behavior of GLUT.
This means that any memory allocated outside the glutMainLoop would
get the chance to be freed before program exit, ensuring no memory leaks.
This is enabled by setting this option to GLUT_ACTION_GLUTMAINLOOP_RETURNS.

With this in mind, it might be a good idea to disable this.
-
glutSetOption(
  GLUT_ACTION_ON_WINDOW_CLOSE,
  GLUT_ACTION_GLUTMAINLOOP_RETURNS
);
-

== Set OpenGL display modes ==
The display modes determine how the OpenGL context we create behaves
and how our graphics are rendered. The details for these options are
as follows:

GLUT_DEPTH - this ensures OpenGL is using the depth buffer or Z-buffer.
The depth buffer contains the floating point Z-depth information for
each pixel rendered. It's used to ensure object ordering and that objects
don't overlap objects that are closer to the screen.

GLUT_DOUBLE - double buffering. Graphics are drawn off screen into a
back buffer, which is switch with the current screen contents, called the
front buffer. The buffer that is rendered to screen is called the front
buffer, and the buffer that is being rendered into is called the back buffer.
When the swap happens, the buffer definitions change.

GLUT_RGBA - colours are defined with RGB and alpha values.
-
glutInitDisplayMode(GLUT_DEPTH | GLUT_DOUBLE | GLUT_RGBA);
-

== Create the window ==
Next we create the window, and set the title to the WINDOW_TITLE_PREFIX.
The return value is checked to ensure GLUT creted a window correctly.
If not, print to stderr an error message.
-
WindowHandle = glutCreateWindow(WINDOW_TITLE_PREFIX);

if(WindowHandle < 1) {
  fprintf(
    stderr,
    "ERROR: Could not create a new rendering window.\n"
  );
  exit(EXIT_FAILURE);
}
-

== Set function callbacks ==
If everything went smoothly so far, we are now ready to set function callbacks.
We call want GLUT to call ResizeFunction when the window is resized, and
RenderFunction when GLUT wants to render the contents of the back buffer.
Note at the bottom, a reference to an FPS meter. We'll cover that later.
-
glutReshapeFunc(ResizeFunction);
glutDisplayFunc(RenderFunction);
FPS meter event handlers.
-

== Resize event handler ==
When the window is resized by the user, store the new width and
height, then redraw the viewport.
We redraw the viewport to make sure that OpenGL doesn't draw outside
of the viewable window, which would be a waste of compute time.
-
void ResizeFunction(int Width, int Height)
{
  CurrentWidth = Width;
  CurrentHeight = Height;
  glViewport(0, 0, CurrentWidth, CurrentHeight);
}
-

== Render event handler ==
Before we render anything, first we should clear the buffers and set
all the pixel to the same color.
Earlier when initializing the window, we set the clear color. This is
the color that glClear uses. Here, we're clearing the render back buffer
(GL_COLOR_BUFFER_BIT) and the depth buffer (GL_DEPTH_BUFFER_BIT).

Right now, we're not rendering anything, so we just swap buffers.

Again, notice the reference to the FPS meter. We'll cover that in a bit.
-
void RenderFunction(void)
{
  FPS meter increment during render.
  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

  glutSwapBuffers();
  glutPostRedisplay();
}
-

== Window initialization function ==
Here you can see how the function works as a whole, using the parts described
above.
-
void InitWindow(int argc, char* argv[])
{
  glutInit(&argc, argv);

#if defined(FREEGLUT)
  Get the context.

  Set the context options.
#endif

  glutInitWindowSize(CurrentWidth, CurrentHeight);

  Set OpenGL display modes.

  Create the window.

  Set function callbacks.
}
-

== Start GLUT loop ==
Once we have the window set up, and the event handlers wired
together, we can start the GLUT main loop.
-
glutMainLoop();
-

== Inserting a FPS Meter ==
In order to measure how well future rendering is happening, we can use an FPS
meter to track how many frames are rendered per second. We are going to display
this as part of the title of the window.

First, we need to set up GLEW so that we can use it.

== GLEW initialization ==
GLEW is a library that contains functionality to interface with newer versions
of OpenGL.
Before we can use GLEW, we need to initialize it. However, initialization of
GLEW requires an active OpenGL context, so that it can query the context for
the functionality it supports. This means that we need to ensure we call do this
after we've initialized the window.
If we can't initalize GLEW, we print some info that will hopefully tell us why,
and quit the program.
-
GLenum GlewInitResult = glewInit();

if (GLEW_OK != GlewInitResult) {
  fprintf(
    stderr,
    "ERROR: %s\n",
    glewGetErrorString(GlewInitResult)
  );
  exit(EXIT_FAILURE);
}
-

== FPS meter global ==
-
unsigned FrameCount = 0;
-

== FPS meter forward declarations ==
-
void TimerFunction(int);
void IdleFunction(void);
-

== FPS meter increment during render ==
Increment the frames rendered during the render method.
-
++FrameCount;
-

== FPS meter idle function ==
The idle function is run by OpenGL when there is no more work to
do.
-
void IdleFunction(void)
{
    glutPostRedisplay();
}
-

== FPS meter timer function ==
Because we call the timer function immediately, we know the value that
is passed to this function will be 0 the first time.

We take advantage of this fact and perform initialization when we
determine this is the first time we run this function.

The initialization creates a string variable and sets it with the
current frame count * 4.

After initialization, we reset the frame counter and tell GLUT
to call the function again in 250 ms.

This results in sampling the framerate 4 times a second, and extrapolating
the FPS based on the performance of the last 4 seconds.

This is somewhat naiive, and can be improved by computing the FPS
as a sliding average over a longer time window.
-
void TimerFunction(int Value)
{
    if (0 != Value) {
        char* TempString = (char*)
            malloc(512 + strlen(WINDOW_TITLE_PREFIX));
 
        sprintf(
            TempString,
            "%s: %d Frames Per Second @ %d x %d",
            WINDOW_TITLE_PREFIX,
            FrameCount * 4,
            CurrentWidth,
            CurrentHeight
        );
 
        glutSetWindowTitle(TempString);
        free(TempString);
    }
 
    FrameCount = 0;
    glutTimerFunc(250, TimerFunction, 1);
}
-

== FPS meter event handlers ==
These are inserted into the program during the OpenGL window initialization above.
The idle function is run when OpenGL is idle.
The timer function is a GLUT function that will periodically call our timer
function. The arguments are as follows:
- Time in milliseconds before the timer function is called
- Function to call
- The value to pass to the function

The internal GLUT counter of milliseconds elapsed is set to 0 on initialization,
which causes the timer function to be called immediately.
-
glutIdleFunc(IdleFunction);
glutTimerFunc(0, TimerFunction, 0);
-

== Initialize ==
Wraps the window initialization, and does a few extra things.
Namely, print some debug info to the console, and paint the window
black.
-
void Initialize(int argc, char* argv[])
{
  InitWindow(argc, argv);

  GLEW initialization.

  fprintf(
    stdout,
    "INFO: OpenGL Version: %s\n",
    glGetString(GL_VERSION)
  );

  glClearColor(0.0f, 0.0f, 0.0f, 0.0f);
}
-

== Standard includes ==
Include some libraries from the stdlib. Include some
IO for debugging.
-
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
-

== OpenGL includes ==
Include the necessary to get OpenGL working.
-
#include <GL/glew.h>
#if defined(__APPLE__) && defined(__MACH__)
#include <GLUT/glut.h>
#else
#include <GL/freeglut.h>
#include <GL/gl.h>
#include <GL/glu.h>
#endif
-

== Preprocessor variables ==
Define preprocessor variables we're going to use.
-
#define WINDOW_TITLE_PREFIX "Chapter 1"
-

== Global variables ==
-
int CurrentWidth = 800,
  CurrentHeight = 600,
  WindowHandle = 0;
FPS meter global.
-

== Forward declarations ==
-
void Initialize(int, char*[]);
void InitWindow(int, char*[]);
void ResizeFunction(int, int);
void RenderFunction(void);
FPS meter forward declarations.
-

== Boilerplate ==
Boilerplate code that puts together the above functionality
and has a main loop, which inits the window, starts the
GLUT loop and then quits once the loop exits.
-
Standard includes.
OpenGL includes.
Preprocessor variables.

Global variables.

Forward declarations.

int main(int argc, char* argv[])
{
  Initialize(argc, argv);

  Start GLUT loop.

  exit(EXIT_SUCCESS);
}

Initialize.

Window initialization function.

Resize event handler.

Render event handler.

FPS meter idle function.

FPS meter timer function.
-

== @blankwindow.cpp ==
Boilerplate.
