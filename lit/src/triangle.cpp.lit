== Chapter 2a ==
This is chapter 2 of the online OpenGL book: 
http://openglbook.com/the-book/chapter-2-vertices-and-shapes/

This program will open a window with an OpenGL context, and
draw a triangle to the screen using a vertex buffer object
(VBO)

See 
http://arcsynthesis.org/gltut/Basics/Tut01%20Following%20the%20Data.html
http://arcsynthesis.org/gltut/Basics/Tut02%20Vertex%20Attributes.html
for details on shaders and pushing data to them
and diagrams that might be useful

== Set function callbacks ==
Include the event handlers required for rendering.
-
glutReshapeFunc(ResizeFunction);
glutDisplayFunc(RenderFunction);
FPS meter event handlers.
Rendering event handlers.
-

== Render event handler ==
This time, we're going to render something. As you can see,
we're rendering a triangle.
-
void RenderFunction(void)
{
  FPS meter increment during render.
  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

  Draw the triangle.

  glutSwapBuffers();
  glutPostRedisplay();
}
-

== GLEW initialization ==
We had to modify the GLEW initialization to set glewExperimental
to true. This is because otherwise, we can't access some of the newer
features of OpenGL.
-
glewExperimental = GL_TRUE;
GLenum GlewInitResult = glewInit();

if (GLEW_OK != GlewInitResult) {
  fprintf(
    stderr,
    "ERROR: %s\n",
    glewGetErrorString(GlewInitResult)
  );
  exit(EXIT_FAILURE);
}
-

== Rendering a triangle ==
The ubiquitous "hello world" of 3D graphics programming is by drawing a triangle
to the screen.

Most online tutorials have you using the glStart and glEnd functions to
draw vertices right in the render function. That's the old school, fixed function
pipeline from years ago. Since then, the world has moved away from the fixed
function pipline into a programmable shader pipeline.

This tutorial does the "hello world" triangle using shaders and something called
a vertex buffer object.

The following sections outline the steps required to draw a triangle to screen
using shaders and VBOs. It's more work, but it's also a more modern method.

== Rendering variables ==
Declare some variables that we'll need for rendering.
Here we are declaring the following variables:
* VertexShaderId - A reference to the compiled vertex shader
* FragmentShaderId - A reference to the compiled fragment shader
* ProgramId - A reference to the entire shader program
* VaoId -
* VboId - A reference to the vertex buffer ID
* ColorBufferId - A reference to the color buffer ID
All references are actually memory locations?
-
GLuint
  VertexShaderId,
  FragmentShaderId,
  ProgramId,
  VaoId,
  VboId,
  ColorBufferId;
-

== GLSL vertex shader ==
The entire contents of the vertex shader are as follows.
Normally the shaders are kept in their own file, and loaded into the app
and compiled by OpenGL on the GPU, however for simplicity (I'm assuming)
they are just defined inline directly in the class.

The vertex shader runs on a per vertex fashion, and is execute each time
for each vertex.

A breakdown of the vertex shader is as follows:
First, we declare the shader targets version 3.30 of GLSL. This is required
as of GLSL 1.10, and if ommitted, causes the shader program to default to
this version of GLSL, preventing the shader program from accessing newer
features of OpenGL.

Next, we define 2 variables that define the position and the color of
each vertex respectively. They are passed into the shader from OpenGL.
They are 4 dimensional vectors.

The last variable is the final calculated color of the vertex. It is an
output of the shader program, and will be used as the input of the
fragment shader program.

In the body of the shader, we set the gl_position property of the vertex
to the position we passed in. This will cause OpenGL to render the vertex
where we want it. Next we set the output of this shader to be the color
that was passed in. This is due to the fact that we can't pass variables
directly to the fragment shader - it always runs after the vertex shader.
-
const GLchar* VertexShader =
{
  "#version 330\n"\

  "layout(location=0) in vec4 in_Position;\n"\
  "layout(location=1) in vec4 in_Color;\n"\
  "out vec4 ex_Color;\n"\

  "void main(void)\n"\
  "{\n"\
  " gl_Position = in_Position;\n"\
  " ex_Color = in_Color;\n"\
  "}\n"
};
-

== GLSL fragment shader ==
The fragment shader accepts the color of the vertex from the vertex
shader in the ex_Color parameter. The names of the parameters have to match?
so that OpenGL can pass them correctly.

We also have another output variable, again the color of the vertex.
This is because the output of the fragment shader will determine what the
fragment on screen will look like.
-
const GLchar* FragmentShader =
{
  "#version 330\n"\

  "in vec4 ex_Color;\n"\
  "out vec4 out_Color;\n"\

  "void main(void)\n"\
  "{\n"\
  " out_Color = ex_Color;\n"\
  "}\n"
};
-

== Vertex buffer object setup function ==
Given that each shader operates on a per vertex fashion, it stands to reason
that we need to create a structure to hold all of the vertices to send to
the GPU to run through the shader program.

OpenGL provides native datastructures that will allow you to pass vertices
to the shader program

Here, you can see a function that is responsible for setting up the VBO.
We start by declaring an array of 3 vertices, each 4 elements: x, y ,z and
w which makes each vertex homogenous.

OpenGL uses a right hand co-ordinate system, which means the z-axis comes
out of the screen, as opposed to a left hand system, where the z-axis goes
into the screen.

Next, we declare an array of the colors of each vertex. These colors need
to be in the same order as the vertices you want to color. Each color is 
represented by 4 values: r(ed), g(reen), b(lue), a(lpha).

Next we reset OpenGL's error buffer by retrieving the last error. We discard
this value becase we're just interested in clearing it.

Next, we create the vertex array object and fill the VBO with data, both of 
which we will go into more detail later.

Lastly, check to see if there was an error creating the VBO. If so, terminate
the program after writing a debug string.
-
void CreateVBO(void)
{
  GLfloat Vertices[] = {
    -0.8f, -0.8f, 0.0f, 1.0f,
     0.0f,  0.8f, 0.0f, 1.0f,
     0.8f, -0.8f, 0.0f, 1.0f
  };

  GLfloat Colors[] = {
    1.0f, 0.0f, 0.0f, 1.0f,
    0.0f, 1.0f, 0.0f, 1.0f,
    0.0f, 0.0f, 1.0f, 1.0f
  };

  GLenum ErrorCheckValue = glGetError();

  Create vertex array object.

  Fill VBO with vertex data.

  Fill VBO with color data.

  ErrorCheckValue = glGetError();
  if (ErrorCheckValue != GL_NO_ERROR)
  {
    fprintf(
      stderr,
      "ERROR: Could not create a VBO: %s \n",
      gluErrorString(ErrorCheckValue)
    );

    exit(-1);
  }
 }
-

== Create vertex array object ==
A vertex array object (VAO) is an object that describes how vertex attributes are
stored in the vertex buffer object (VBO). The VAO doesn't do any storing, but
tells the VBO how to interpret the data it has been given.

The first parameter is the number of vertex arrays to generate.

Note that a VAO isn't essential to creating a VBO. You can create a VBO without
using a VAO, however a VAO will improve performance.

This StackOverflow question has more information:
http://stackoverflow.com/questions/5970087/understanding-vertex-array-objects-glgenvertexarrays

We also bind the vertex array, meaning that the following operations will act on
that array.
-
glGenVertexArrays(1, &VaoId);
glBindVertexArray(VaoId);
-

== Fill VBO with vertex data ==
Next, we allocate some memory on the GPU to hold our buffers by using glGenBuffers.
We are generating 1 buffer and assigning it's ID to the VboId array.

You'll notice we do this again for the color information. We could probably
create 2 buffers here and cut down some of the code, however for clarity (probably)
we're doing it in 2 different steps.

Next, we bind the buffer to the GL_ARRAY_BUFFER target. This sets the type of the
buffer, in this case vertex attributes, and also makes this buffer the active one.
All functions that apply to buffers will affect the currently active buffer.

glBufferData pushes the data into the buffer. In this case we're telling OpenGL
to push the data to the GL_ARRAY_BUFFER target, how much data is being pushed,
what the data actually is, and how we're going to use the data. GL_STATIC_DRAW
means that the data won't be changed, and will be used for drawing.

Once the data is in the GPU memory, we need to tell OpenGL how to use it.
glVertexAttribPointer tells OpenGL  how to use the data.
The parameters are as follows:
* index - the index of the attribute to be modified. Each buffer can have
  GL_MAX_VERTEX_ATTRIBS attributes. By changing the stride and pointer
  params (discussed later), a single buffer can describe a lot of data about
  a vertex.
* size - each component (vertex, in this case) is comprised of a
  number of entries in the buffer. This parameter tells OpenGL how many.
* type - the type of each entry in the buffer. Used by OpenGL to calculate
  size in bytes of each component.
* normalized - if we were using integer types, we could optionally normalize
  each element. This is useful for color data, however this example does not use
  it, due to using GL_FLOAT objects
* stride - how many bytes are in between each component in the buffer. This allows
  OpenGL to skip buffer entries that are not related to this attribute.
* pointer - offset, in bytes, of where the data related to this attribute starts.

As an example, consider storing both color and positional data on this triangle in
a single buffer.
The array would like like this:
@
GLfloat Vertices[] = {
    -0.8f, -0.8f, 0.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
     0.0f,  0.8f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 1.0f,
     0.8f, -0.8f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 1.0f
  };  
@
The first 4 values describe vertex 1's position. The next 4 describe vertex 1's
color, and so on.

To set this up, you'd use the following calls to glVertexAttribPointer:
@
glVertexAttribPointer(0, 4, GL_FLOAT, GL_FALSE, 4 * sizeof(GL_FLOAT), 0) // position
glVertexAttribPointer(1, 4, GL_FLOAT, GL_TRUE, 4 * sizeof(GL_FLOAT), 4 * sizeof(GL_FLOAT)) // color
@
The first call tells OpenGL that there are 4 * the size of a GL_FLOAT in bytes
(should be 16) between each element, and that the first element is at the 0th item
in the array.
The second call tells OpenGL that there are the same number of bytes between each
element, and that the first element is offset by 4 * the size of a GL_FLOAT, which
will cause OpenGL to skip the first vertex's positional data.

A call to glEnableVertexAttribArray will tell OpenGL that the attribute defined
by the intext passed in is ready to be used for drawing.
When finished drawing, glDisableVertexAttribArray should be called with the
index.

In this app, because we're only drawing one triangle, the calls are in CreateVBO
and DestroyVBO, meaning the attributes are enabled through the execution of the
entire program. Normally this is not the case. You usually enable the attribute,
draw the object and then disable it.
-
glGenBuffers(1, &VboId);
glBindBuffer(GL_ARRAY_BUFFER, VboId);
glBufferData(GL_ARRAY_BUFFER, sizeof(Vertices), Vertices, GL_STATIC_DRAW);
glVertexAttribPointer(0, 4, GL_FLOAT, GL_FALSE, 0, 0);
glEnableVertexAttribArray(0);
-

== Fill VBO with color data ==
Do the same as the above with the color data.

Note that this example has the color data being stored in a different buffer.
However, the glVertexAttribPointer call needs to have a different index
because it's setting the attributes on the VBO, not the buffer the data is
in. The buffer is jused used to store the data.
-
glGenBuffers(1, &ColorBufferId);
glBindBuffer(GL_ARRAY_BUFFER, ColorBufferId);
glBufferData(GL_ARRAY_BUFFER, sizeof(Colors), Colors, GL_STATIC_DRAW);
glVertexAttribPointer(1, 4, GL_FLOAT, GL_FALSE, 0, 0);
glEnableVertexAttribArray(1);
-

== Compile vertex shader ==
As implied above, a GLSL program needs to be compiled and linked before it can
be used, similar to a C or C++ program

First, we need to create the shader object, and tell the GPU what kind of
shader it is.

Next, we load the source of the shader into the object by calling glShaderSource.
The parameters of glShader source are as follows:
* shader - The ID of the shader object to load the source into
* count - How many strings are in the string parameter. In this case it is 1,
  because the source is one long string.
* string - The string/s of the source.
* length - The length is an array of integers specifying how long each string is.
  If using null terminated strings, you can set this to NULL.

Once we've loaded the source into the shader, we need to compile it.
-
VertexShaderId = glCreateShader(GL_VERTEX_SHADER);
glShaderSource(VertexShaderId, 1, &VertexShader, NULL);
glCompileShader(VertexShaderId);
-

== Compile fragment shader ==
-
FragmentShaderId = glCreateShader(GL_FRAGMENT_SHADER);
glShaderSource(FragmentShaderId, 1, &FragmentShader, NULL);
glCompileShader(FragmentShaderId);
-

== Shader setup function ==
Once we have compiled the shaders we're going to include in our shader program,
we need to create the program and attach the shaders.
Then we need to link the program, and use the program.
To switch programs, we'd call glUserProgram with a different ID.

Finally, check to see if there was an error, from compiling to linking to using.
If there was an error, we output some debug info and then quit the program.
-
void CreateShaders(void)
{
  GLenum ErrorCheckValue = glGetError();

  Compile vertex shader.

  Compile fragment shader.

  ProgramId = glCreateProgram();
    glAttachShader(ProgramId, VertexShaderId);
    glAttachShader(ProgramId, FragmentShaderId);
  glLinkProgram(ProgramId);
  glUseProgram(ProgramId);

  ErrorCheckValue = glGetError();
  if (ErrorCheckValue != GL_NO_ERROR)
  {
    fprintf(
      stderr,
      "ERROR: Could not create the shaders: %s \n",
      gluErrorString(ErrorCheckValue)
    );

    exit(-1);
  }
}
-

== Draw the triangle ==
Finally, after all that setup, we get to draw the contents of the VBO.
Remember back when we discussed creating the VBO, we mentioned enabling
attributes. glDrawAttributes operates on the vertex attribute arrays that are
enabled by calling glEnableVertexAttribArray, and each attribute points to
a VBO.

The parameters to glDrawArrays are as follows:
* mode - The type of array data that's going to be drawn
* first - The first index of the enabled vertex attribute array.
* count - The number of enabled indicies to draw.

Ideally, when we set up the vertex buffer, we'd also have set up an index
buffer. This allows you to reuse vertices to draw multiple objects, which
will be used whenever you draw a complex object. 
This is what the first and count parameters refer to.
We'll cover index buffers later.
-
glDrawArrays(GL_TRIANGLES, 0, 3);
-

== The close function ==
This function will clear memory up when called.
-
void Cleanup(void)
{
    DestroyShaders();
    DestroyVBO();
}
-


== Shader destruction function ==
Before we can destroy our shaders, we need to tell OpenGL to stop
using them.
Once they are unused, we can detatch the shaders from the shader
program, delete them, and then delete the program. This will clear
the memory on the GPU?
-
void DestroyShaders(void)
{
  GLenum ErrorCheckValue = glGetError();

  glUseProgram(0);

  glDetachShader(ProgramId, VertexShaderId);
  glDetachShader(ProgramId, FragmentShaderId);

  glDeleteShader(FragmentShaderId);
  glDeleteShader(VertexShaderId);

  glDeleteProgram(ProgramId);

  ErrorCheckValue = glGetError();
  if (ErrorCheckValue != GL_NO_ERROR)
  {
    fprintf(
      stderr,
      "ERROR: Could not destroy the shaders: %s \n",
      gluErrorString(ErrorCheckValue)
    );

    exit(-1);
  }
}
-

== Vertex buffer object destruction function ==
Similar to destroying shaders, first we need to disable the vertex
attribute arrays.
Then we bind a NULL buffer to unbind the current buffer for deletion.
Then we delete the buffers.
Similarly, we need to unbind the VAO, and then delete that.
Finally, an error/debug check.
-
void DestroyVBO(void)
{
  GLenum ErrorCheckValue = glGetError();

  glDisableVertexAttribArray(1);
  glDisableVertexAttribArray(0);

  glBindBuffer(GL_ARRAY_BUFFER, 0);

  glDeleteBuffers(1, &ColorBufferId);
  glDeleteBuffers(1, &VboId);

  glBindVertexArray(0);
  glDeleteVertexArrays(1, &VaoId);

  ErrorCheckValue = glGetError();
  if (ErrorCheckValue != GL_NO_ERROR)
  {
    fprintf(
      stderr,
      "ERROR: Could not destroy the VBO: %s \n",
      gluErrorString(ErrorCheckValue)
    );

    exit(-1);
  }
}
-

== Rendering forward declarations ==
-
void Cleanup(void);
void CreateVBO(void);
void DestroyVBO(void);
void CreateShaders(void);
void DestroyShaders(void);
-

== Rendering event handlers ==
This calls the Cleanup function when GLUT is closing.
This is only included when using freeglut.
When not using freeglut, the VBO and shaders will probably
leak.
-
#if defined(FREEGLUT)
  glutCloseFunc(Cleanup);
#endif
-

== Initialize ==
Modify the initialization to create the shaders and VBO that
we need to render.
-
void Initialize(int argc, char* argv[])
{
  InitWindow(argc, argv);

  GLEW initialization.

  fprintf(
    stdout,
    "INFO: OpenGL Version: %s\n",
    glGetString(GL_VERSION)
  );

  glClearColor(0.0f, 0.0f, 0.0f, 0.0f);

  CreateShaders();
  CreateVBO();

}
-

== Preprocessor variables ==
Redefine the title for Chapter 2
-
#define WINDOW_TITLE_PREFIX "Chapter 2"
-

== Global variables ==
Add our new global variables in
-
int CurrentWidth = 800,
  CurrentHeight = 600,
  WindowHandle = 0;
FPS meter global.

Rendering variables.

GLSL vertex shader.
GLSL fragment shader.
-

== Forward declarations ==
Add our new rendering methods in
-
void Initialize(int, char*[]);
void InitWindow(int, char*[]);
void ResizeFunction(int, int);
void RenderFunction(void);
FPS meter forward declarations.
Rendering forward declarations.
-

== Boilerplate ==
Add our new rendering functions to the boilerplate to ensure proper
literati compilation.
-
Standard includes.
OpenGL includes.
Preprocessor variables.

Global variables.

Forward declarations.

int main(int argc, char* argv[])
{
  Initialize(argc, argv);

  Start GLUT loop.

  exit(EXIT_SUCCESS);
}

Initialize.

Window initialization function.

Resize event handler.

Render event handler.

FPS meter idle function.

FPS meter timer function.

The close function.

Vertex buffer object setup function.

Vertex buffer object destruction function.

Shader setup function.

Shader destruction function.
-

== @triangle.cpp ==
@inherit blankwindow.cpp.lit
Boilerplate.
