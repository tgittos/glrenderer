== Chapter 2b ==
This is chapter 2 of the online OpenGL book: 
http://openglbook.com/the-book/chapter-2-vertices-and-shapes/

This program will open a window with an OpenGL context, and
draw a rectangle to the screen using a vertex buffer object
(VBO)

== Vertex buffer object setup function ==
Here we've changed the vertices and colors array to hold our 4th
vertex.
-
void CreateVBO(void)
{
  GLfloat Vertices[] = {
    -0.8f,  0.8f, 0.0f, 1.0f,
     0.8f,  0.8f, 0.0f, 1.0f,
    -0.8f, -0.8f, 0.0f, 1.0f,
     0.8f, -0.8f, 0.0f, 1.0f
  };

  GLfloat Colors[] = {
    1.0f, 0.0f, 0.0f, 1.0f,
    0.0f, 1.0f, 0.0f, 1.0f,
    0.0f, 0.0f, 1.0f, 1.0f,
    1.0f, 1.0f, 1.0f, 1.0f

  };

  GLenum ErrorCheckValue = glGetError();

  Create vertex array object.

  Fill VBO with vertex data.

  Fill VBO with color data.

  ErrorCheckValue = glGetError();
  if (ErrorCheckValue != GL_NO_ERROR)
  {
    fprintf(
      stderr,
      "ERROR: Could not create a VBO: %s \n",
      gluErrorString(ErrorCheckValue)
    );

    exit(-1);
  }
 }
-

== Fill VBO with vertex data ==
With our 4th extra vertex, we need to update the glVertexAttribPointer to
draw 4 vertices, not 3.
-
glGenBuffers(1, &VboId);
glBindBuffer(GL_ARRAY_BUFFER, VboId);
glBufferData(GL_ARRAY_BUFFER, sizeof(Vertices), Vertices, GL_STATIC_DRAW);
glVertexAttribPointer(0, 4, GL_FLOAT, GL_FALSE, 0, 0);
glEnableVertexAttribArray(0);
-

== Fill VBO with color data ==
Same thing with the color buffer
-
glGenBuffers(1, &ColorBufferId);
glBindBuffer(GL_ARRAY_BUFFER, ColorBufferId);
glBufferData(GL_ARRAY_BUFFER, sizeof(Colors), Colors, GL_STATIC_DRAW);
glVertexAttribPointer(1, 4, GL_FLOAT, GL_FALSE, 0, 0);
glEnableVertexAttribArray(1);
-

== Draw the rectangle ==
As you can see in this example, we're drawing with GL_TRIANGLE_STRIP mode,
instead of GL_TRIANGLES. This enables us to reuse vertices, and OpenGL
will draw multiple triangles connected together.
Below is a good diagram of how GL_TRIANGLE_STRIP works.
http://content3.openglbook.com/wp-content/uploads/2011/04/4262_02_06.png
-
glDrawArrays(GL_TRIANGLE_STRIP, 0, 4);
-

== Render event handler ==
Update the render event handler to draw our rectangle.
-
void RenderFunction(void)
{
  FPS meter increment during render.
  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

  Draw the rectangle.

  glutSwapBuffers();
  glutPostRedisplay();
}
-

== @chapter02b.cpp ==
@inherit chapter02a.cpp.lit
Boilerplate.
