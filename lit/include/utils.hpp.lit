== 3D Math Utilities ==
In order to effectively program 3D computer graphics, we
need a library of math utilities to help us with calculations.

Normally, for a serious project you'd use one of the many,
high quality open source projects that are available. However,
because this is an educational series of programs, it will
be acceptable to roll our own math library.

Serious math library: http://glm.g-truc.net/

This is the header for that utility file.

== Pi ==
-
static const double PI = 3.14159265358979323846;
-

== Vertex ==
A data structure, as outlined in Chapter 03b, to hold vertex
position and color data.
-
typedef struct Vertex
{
  float Position[4];
  float Color[4];
} Vertex;
-

== Matrix ==
A data structure to represent a 4x4 matrix.
-
typedef struct Matrix
{
  float m[16];
} Matrix;
-

== Identity matrix ==
The identity matrix
-
static const Matrix IDENTITY_MATRIX = { {
  1, 0, 0, 0,
  0, 1, 0, 0,
  0, 0, 1, 0,
  0, 0, 0, 1
} };
-

== Geometry forward declarations ==
-
float Cotangent(float angle);
float DegreesToRadians(float degrees);
float RadiansToDegrees(float radians);
-

== Linear algebra forward declarations ==
-
Matrix MultiplyMatrices(const Matrix* m1, const Matrix* m2);
void RotateAboutX(Matrix* m, float angle);
void RotateAboutY(Matrix* m, float angle);
void RotateAboutZ(Matrix* m, float angle);
void ScaleMatrix(Matrix* m, float x, float y, float z);
void TranslateMatrix(Matrix* m, float x, float y, float z);

Matrix CreateProjectionMatrix(
  float fovy,
  float aspect_ratio,
  float near_plane,
  float far_plane
);
-

== OpenGL forward delcarations ==
-
void ExitOnGLError(const char* error_message);
GLuint LoadShader(const char* filename, GLenum shader_type);
-

== Boilerplate ==
-
#ifndef UTILS_H
#define UTILS_H
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <time.h>
#include <GL/glew.h>
#if defined(__APPLE__) && defined(__MACH__)
#include <GLUT/glut.h>
#else
#include <GL/freeglut.h>
#endif

Pi.

Vertex.

Matrix.

Identity matrix.

Geometry forward declarations.

Linear algebra forward declarations.

OpenGL forward delcarations.

#endif
-

== @utils.hpp ==
Boilerplate.