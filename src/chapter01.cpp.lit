== Chapter 1 ==
This is chapter 1 of the online OpenGL book: 
http://openglbook.com/the-book/chapter-1-getting-started/

This program will simply open a blank window that we can
resize, and print out information about OpenGL to the console.

== Window initialization function ==
First thing to do is to create and initialize the window that
is going to hold our OpenGL context.

OpenGL is an API for accessing the underlying graphics hardware
of a computer. As such, it is independent from the windowing API.
What is happening here is we're creating a OS level window that
hosts an OpenGL context. It's that context that will recieve
our OpenGL calls.

GLUT is a library that abstracts the OS level opening of a window
and insertion of an OpenGL context, so we're going to leverage GLUT.

The original tutorial used freeglut, however this code is originally
written on OS X, which natively has it's own GLUT library, so we'll
use that.

If we are using freeglut, we ask for a forward-compatible OpenGL 4.0
core-profile context. If we're not using freeglut, we will just take
whatever we're given.

Then we set the size and modes, and wire up a few event handlers for
GLUT events - resizing and showing the window.
-
void InitWindow(int argc, char* argv[])
{
  glutInit(&argc, argv);

#if defined(FREEGLUT)
  glutInitContextVersion(4, 0);
  glutInitContextFlags(GLUT_FORWARD_COMPATIBLE);
  glutInitContextProfile(GLUT_CORE_PROFILE);

  glutSetOption(
    GLUT_ACTION_ON_WINDOW_CLOSE,
    GLUT_ACTION_GLUTMAINLOOP_RETURNS
  );
#endif

  glutInitWindowSize(CurrentWidth, CurrentHeight);

  glutInitDisplayMode(GLUT_DEPTH | GLUT_DOUBLE | GLUT_RGBA);

  WindowHandle = glutCreateWindow(WINDOW_TITLE_PREFIX);

  if(WindowHandle < 1) {
    fprintf(
      stderr,
      "ERROR: Could not create a new rendering window.\n"
    );
    exit(EXIT_FAILURE);
  }

  glutReshapeFunc(ResizeFunction);
  glutDisplayFunc(RenderFunction);
}
-

== Start GLUT loop ==
Once we have the window set up, and the event handlers wired
together, we can start the GLUT main loop.
-
glutMainLoop();
-

== Resize event handler ==
When the window is resized by the user, store the new width and
height, then redraw the viewport.
-
void ResizeFunction(int Width, int Height)
{
  CurrentWidth = Width;
  CurrentHeight = Height;
  glViewport(0, 0, CurrentWidth, CurrentHeight);
}
-

== Render event handler ==
Right now, we're not rendering anything. We just clear the
buffer then swap.
-
void RenderFunction(void)
{
  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

  glutSwapBuffers();
  glutPostRedisplay();
}
-

== Initialize ==
Wraps the window initialization, and does a few extra things.
Namely, print some debug info to the console, and paint the window
black.
-
void Initialize(int argc, char* argv[])
{
  InitWindow(argc, argv);

  fprintf(
    stdout,
    "INFO: OpenGL Version: %s\n",
    glGetString(GL_VERSION)
  );

  glClearColor(0.0f, 0.0f, 0.0f, 0.0f);
}
-

== Standard includes ==
Include some libraries from the stdlib. Include some
IO for debugging.
-
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
-

== OpenGL includes ==
Include the necessary to get OpenGL working.
-
#include <GL/glew.h>
#include <GLUT/glut.h>
-

== Preprocessor variables ==
Define preprocessor variables we're going to use.
-
#define WINDOW_TITLE_PREFIX "Chapter 1"
-

== Global variables ==
-
int CurrentWidth = 800,
  CurrentHeight = 600,
  WindowHandle = 0;
-

== Forward declarations ==
-
void Initialize(int, char*[]);
void InitWindow(int, char*[]);
void ResizeFunction(int, int);
void RenderFunction(void);
-

== Boilerplate ==
Boilerplate code that puts together the above functionality
and has a main loop, which inits the window, starts the
GLUT loop and then quits once the loop exits.
-
Standard includes.
OpenGL includes.
Preprocessor variables.

Global variables.

Forward declarations.

int main(int argc, char* argv[])
{
  Initialize(argc, argv);

  Start GLUT loop.

  exit(EXIT_SUCCESS);
}

Initialize.

Window initialization function.

Resize event handler.

Render event handler.
-

== @chapter01.cpp ==
Boilerplate.